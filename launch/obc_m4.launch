<launch>

  <!-- ============= OBC PARAMETERS FOR MILESTONE 4 ============== -->

  <arg name="sim"           default="false"/>
  <arg name="oil"           default="false"/>
  <arg name="vicon"         default="true"/>
  <arg name="auto_arm"      default="false"/>
  <!-- <arg name="record"        default="false"/> -->
  <arg name="mav_name"      default="aerowake_MIT"/>
  <arg name="vis_debug"     default="0"/>

  <arg name="rf_param"      default="rosflight_params"/>
  <arg name="control_param" default="milestone_2_gains"/>
  <arg name="ekf_param"     default="mit-uav-mocap"/>
  <arg name="motor_param"   default="mit-uav-motor"/>
  <arg name="frame_param"   default="mit-uav-frame"/>
  <arg name="ukf_param"     default="mit-uav-ukf"/>
  <arg name="vis_param"     default="mit-uav-sim"/>
  <arg name="bench_param"   default="vis-bench"/>
  <arg name="camcfg_param"  default="camera_config_GREENLIGHTS"/> <!-- ?? -->
  <arg name="camcal_param"  default="calib-small-1"/> <!-- ?? -->

  <!-- =========================================================== -->

  <!-- Serial Communication Parameters -->
  <arg unless="$(arg sim)" name="udp"        default="false"/>
  <arg     if="$(arg sim)" name="udp"        default="true"/>
  <arg unless="$(arg oil)" name="obc_host"   default="localhost"/>
  <arg unless="$(arg oil)" name="obc_port"   default="14525"/>
  <arg unless="$(arg oil)" name="fcu_host"   default="localhost"/>
  <arg unless="$(arg oil)" name="fcu_port"   default="14520"/>
  <arg     if="$(arg oil)" name="obc_host"   default="192.168.1.140"/>
  <arg     if="$(arg oil)" name="obc_port"   default="50000"/>
  <arg     if="$(arg oil)" name="fcu_host"   default="192.168.1.1"/>
  <arg     if="$(arg oil)" name="fcu_port"   default="50001"/>

  <!-- Parameter Files -->
  <arg name="rf_paramfile"      default="$(find aerowake_params)/params/$(arg rf_param).yml"/>
  <arg name="control_paramfile" default="$(find aerowake_params)/params/controller/$(arg control_param).yaml"/>
  <arg name="ekf_paramfile"     default="$(find aerowake_params)/params/ekf/$(arg ekf_param).yaml"/>
  <arg name="ukf_paramfile"     default="$(find aerowake_params)/params/ukf/$(arg ukf_param).yaml"/>
  <arg name="motor_paramfile"   default="$(find aerowake_params)/params/motor/$(arg motor_param).yaml"/>
  <arg name="frame_paramfile"   default="$(find aerowake_params)/params/frame/$(arg frame_param).yaml"/>
  <arg name="vis_paramfile"     default="$(find aerowake_params)/params/vision/$(arg vis_param).yaml"/>
  <arg name="camcal_paramfile"  default="$(find aerowake_params)/params/camera/$(arg camcal_param).yaml"/>
  <arg name="bench_paramfile"   default="$(find aerowake_params)/params/bench/$(arg bench_param).yaml"/>

  <!-- ROSflight -->
  <node name="rosflight_io" pkg="rosflight" type="rosflight_io" output="screen">
    <param name="udp"         value="$(arg udp)"/>
    <param name="bind_host"   value="$(arg obc_host)"/>
    <param name="bind_port"   value="$(arg obc_port)"/>
    <param name="remote_host" value="$(arg fcu_host)"/>
    <param name="remote_port" value="$(arg fcu_port)"/>
    <param name="port"        value="/dev/ttyACM0"/>
  </node>

  <!-- Automatic IMU calibration and RC arming, if desired -->
  <group if="$(arg sim)">
    <group if="$(arg auto_arm)">
      <node name="imu_calibrator" pkg="aerowake_utils" type="imu_calibrator.py" output="screen">
        <param name="wait_secs" value="4.0"/>
      </node>
      <node name="automatic_armer" pkg="aerowake_utils" type="automatic_rc.py" output="screen">
        <param name="rosflight_paramfile" value="$(arg rf_paramfile)"/>
        <param name="wait_secs" value="9.0"/>
      </node>
    </group>
    <node name="benchmarker" pkg="aerowake_utils" type="benchmark_commander.py" output="screen">
      <rosparam command="load" file="$(arg bench_paramfile)"/>
    </node>
  </group>

  <!-- Vision Bridge -->
  <node name="vision_bridge" pkg="aerowake_vision" type="vision_system_bridge" output="screen">
    <rosparam command="load" file="$(arg frame_paramfile)"/>
    <remap from="rel_odometry" to="$(arg mav_name)/rel_truth/NED"/>
  </node>

  <!-- Vision System -->
  <node name="vision_system" pkg="aerowake_vision" type="vision_system.py" output="screen">
    <param name="debug" value="$(arg vis_debug)"/>
    <rosparam command="load" file="$(arg camcal_paramfile)"/>
    <rosparam command="load" file="$(arg vis_paramfile)"/>
    <rosparam command="load" file="$(arg frame_paramfile)"/>
  </node>


  <!-- Estimator -->
  <!-- <node name="estimator" pkg="roscopter" type="ekf_node" output="screen">
    <rosparam command="load" file="$(arg ekf_paramfile)"/>
    <remap from="imu" to="imu/data"/>
    <remap from="reference" to="$(arg mav_name)/truth/NED"/>
    <remap from="odom" to="odometry"/>
  </node> -->

  <!-- Control -->
  <node name="controller" pkg="roscopter" type="controller" output="screen">
    <rosparam command="load" file="$(arg control_paramfile)"/>
    <!-- <remap from="estimate" to="odometry"/> -->
    <remap from="estimate" to="$(arg mav_name)/truth/NED"/>
  </node>

  <!-- Motor Speed Calculator -->
  <!-- <node name="motor_speed" pkg="aerowake_utils" type="motor_speed_calc.py" output="screen">
    <rosparam command="load" file="$(arg motor_paramfile)"/>
    <remap from="signals" to="output_raw"/>
    <remap from="motor_speeds" to="motor_omegas"/>
  </node> -->

  <!-- Odometry Transformer -->
  <!-- <node name="odometry_transformer" pkg="aerowake_utils" type="odom_ned2nwu.py" output="screen">
    <remap from="input_odom" to="odometry"/>
    <remap from="output_odom" to="odometry_NWU_XAV"/>
  </node> -->

  <!-- Disturbance Observer -->
  <!-- <node name="unscented_kalman_filter_node" pkg="unscented_kalman_filter"
        type="unscented_kalman_filter_node" output="screen">
    <rosparam command="load" file="$(arg ukf_paramfile)"/>
    <rosparam command="load" file="$(arg motor_paramfile)"/>
    <rosparam command="load" file="$(arg frame_paramfile)"/>
    <remap from="odometry" to="odometry_NWU_XAV"/>
    <remap from="motor_speed" to="motor_omegas"/>
    <remap from="external_forces_moments" to="Fext"/>
  </node> -->

  <!-- ROSbag recorder -->
  <!-- <group if="$(arg record)">
    <node name="recorder" pkg="rosbag" type="record" output="screen"
          args="-o obc_m4 /vision_pose"/>
  </group> -->

</launch>
